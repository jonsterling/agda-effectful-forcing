module System-T.Syntax where

open import Prelude.Finite
open import Prelude.Functor
open import Prelude.Monad
open import Prelude.Natural
open import Prelude.Path
open import Prelude.String
open import Prelude.Monoidal hiding (_РЄњ_; _,_)

import Context as Ctx
open Ctx hiding (РІё; _,_)

data BaseType : Set where
  nat atom : BaseType

data Type : Set where
  `_ : BaseType Рєњ Type
  _РЄњ_ : Type Рєњ Type Рєњ Type

infixr 6 _РЄњ_

Ctx : Nat Рєњ Set
Ctx n = Type ^ n

module ­ЮћЈ where
  data Ob : Set where
    T : Ob
    T╬Е : Ob

  data Hom : Ob Рєњ Ob Рєњ Set where
    TРЄњT : Hom T T
    -РЄњT╬Е : Рѕђ {­ЮћЈ} Рєњ Hom ­ЮћЈ T╬Е

open ­ЮћЈ using (T; T╬Е; TРЄњT; -РЄњT╬Е)

module _ where
  open Ctx
  data _Рќ╣_Рібрхђ_ {n : Nat} : (­ЮћЈ : ­ЮћЈ.Ob) (╬Њ : Ctx n) Рєњ Type Рєњ Set where
    tok : Рѕђ {­ЮћЈ} {╬Њ : Ctx n} Рєњ String Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ` atom
    zero : Рѕђ {­ЮћЈ} {╬Њ : Ctx n} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ` nat
    succ : Рѕђ {­ЮћЈ} {╬Њ : Ctx n} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ` nat РЄњ ` nat
    rec[_] : Рѕђ {­ЮћЈ} {╬Њ : Ctx n} ¤Ѓ Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ (` nat РЄњ ¤Ѓ РЄњ ¤Ѓ) РЄњ ¤Ѓ РЄњ ` nat РЄњ ¤Ѓ
    ╬й : Рѕђ {­ЮћЈ} {╬Њ : Ctx n} i Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ╬Њ [ i ]
    кЏ_ : Рѕђ {­ЮћЈ} {╬Њ : Ctx n} {¤Ѓ ¤ё} Рєњ ­ЮћЈ Рќ╣ ╬Њ , ¤Ѓ Рібрхђ ¤ё Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤Ѓ РЄњ ¤ё
    _┬и_ : Рѕђ {­ЮћЈ} {╬Њ : Ctx n} {¤Ѓ ¤ё} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ (¤Ѓ РЄњ ¤ё) Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤Ѓ Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤ё
    ╬Е : {╬Њ : Ctx n} Рєњ T╬Е Рќ╣ ╬Њ Рібрхђ ` nat РЄњ ` nat

  infixl 1 _┬и_
  infixr 3 _Рќ╣_Рібрхђ_

_Рібрхђ_ : {n : Nat} Рєњ Ctx n Рєњ Type Рєњ Set
╬Њ Рібрхђ ¤ё = Рѕђ {­ЮћЈ} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤ё

Рібрхђ_ : Type Рєњ Set
Рібрхђ ¤ё = Рѕђ {n} {╬Њ : Ctx n} Рєњ ╬Њ Рібрхђ ¤ё

infixr 3 _Рібрхђ_
infixr 3 Рібрхђ_

Рібрхђ-map : Рѕђ {­ЮћЈРѓђ ­ЮћЈРѓЂ n ¤ё} {╬Њ : Ctx n} Рєњ ­ЮћЈ.Hom ­ЮћЈРѓђ ­ЮћЈРѓЂ Рєњ ­ЮћЈРѓђ Рќ╣ ╬Њ Рібрхђ ¤ё Рєњ ­ЮћЈРѓЂ Рќ╣ ╬Њ Рібрхђ ¤ё
Рібрхђ-map TРЄњT tm = tm
Рібрхђ-map -РЄњT╬Е (tok x) = tok x
Рібрхђ-map -РЄњT╬Е zero = zero
Рібрхђ-map -РЄњT╬Е succ = succ
Рібрхђ-map -РЄњT╬Е rec[ ¤Ѓ ] = rec[ ¤Ѓ ]
Рібрхђ-map -РЄњT╬Е (╬й i) = ╬й i
Рібрхђ-map -РЄњT╬Е (кЏ e) = кЏ Рібрхђ-map -РЄњT╬Е e
Рібрхђ-map -РЄњT╬Е (f ┬и m) = Рібрхђ-map -РЄњT╬Е f ┬и Рібрхђ-map -РЄњT╬Е m
Рібрхђ-map -РЄњT╬Е ╬Е = ╬Е

module _ where
  open Ctx

  ren : Рѕђ {­ЮћЈ m n ¤ё} {╬Њ : Ctx m} {╬ћ : Ctx n} Рєњ Ren ╬Њ ╬ћ Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤ё Рєњ ­ЮћЈ Рќ╣ ╬ћ Рібрхђ ¤ё
  ren ¤Ђ (tok x) = tok x
  ren ¤Ђ zero = zero
  ren ¤Ђ succ = succ
  ren ¤Ђ rec[ ¤Ѓ ] = rec[ ¤Ѓ ]
  ren ¤Ђ (╬й i) rewrite Ren.coh ¤Ђ i = ╬й (Ren.ap ¤Ђ i)
  ren ¤Ђ (кЏ t) = кЏ (ren (ren-extend ¤Ђ) t)
  ren ¤Ђ (m ┬и n) = ren ¤Ђ m ┬и ren ¤Ђ n
  ren ¤Ђ ╬Е = ╬Е

  wk : Рѕђ {­ЮћЈ n ¤Ѓ ¤ё} {╬Њ : Ctx n} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤ё Рєњ ­ЮћЈ Рќ╣ ╬Њ , ¤Ѓ Рібрхђ ¤ё
  wk {¤Ѓ = ¤Ѓ} {╬Њ = ╬Њ} = ren ¤Ђ
    where
      ¤Ђ : Рѕђ {n ¤Ѓ} {╬Њ : Ctx n} Рєњ Ren ╬Њ (╬Њ , ¤Ѓ)
      Ren.ap ¤Ђ i = su i
      Ren.coh ¤Ђ _ = refl
