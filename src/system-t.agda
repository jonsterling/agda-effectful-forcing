module system-t where

open import Prelude.Finite
open import Prelude.Functor
open import Prelude.Monad
open import Prelude.Natural
open import Prelude.String
open import Prelude.Monoidal hiding (_РЄњ_)

open ╬а using (_Рѕў_)

open import Baire
open import Dialogue
open import Context

data type : Set where
  nat : type
  atom : type
  _РЄњ_ : type Рєњ type Рєњ type

infixr 6 _РЄњ_

Ctx : Nat Рєњ Set
Ctx n = type ^ n

module Lang where
  data Ob : Set where
    T : Ob
    T╬Е : Ob

  data Hom : Ob Рєњ Ob Рєњ Set where
    TРЄњT : Hom T T
    -РЄњT╬Е : Рѕђ {­ЮћЈ} Рєњ Hom ­ЮћЈ T╬Е

data _Рќ╣_Рібрхђ_ {n : Nat} : (­ЮћЈ : Lang.Ob) (╬Њ : Ctx n) Рєњ type Рєњ Set where
  tok : {­ЮћЈ : _} {╬Њ : Ctx n} Рєњ String Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ atom
  ze : {­ЮћЈ : _} {╬Њ : Ctx n} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ nat
  su : {­ЮћЈ : _} {╬Њ : Ctx n} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ nat РЄњ nat
  rec : {­ЮћЈ : _} {╬Њ : Ctx n} {¤Ѓ : type} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ (nat РЄњ ¤Ѓ РЄњ ¤Ѓ) РЄњ ¤Ѓ РЄњ nat РЄњ ¤Ѓ
  ╬й : {­ЮћЈ : _} {╬Њ : Ctx n} Рєњ (i : Fin n) Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ╬Њ [ i ]
  кЏ_ : {­ЮћЈ : _} {╬Њ : Ctx n} {¤Ѓ ¤ё : type} Рєњ ­ЮћЈ Рќ╣ ╬Њ , ¤Ѓ Рібрхђ ¤ё Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤Ѓ РЄњ ¤ё
  _┬и_ : {­ЮћЈ : _} {╬Њ : Ctx n} {¤Ѓ ¤ё : type} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ (¤Ѓ РЄњ ¤ё) Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤Ѓ Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤ё
  ╬Е : {╬Њ : Ctx n} Рєњ Lang.T╬Е Рќ╣ ╬Њ Рібрхђ nat РЄњ nat

infixr 3 _Рќ╣_Рібрхђ_

Рібрхђ-map : Рѕђ {­ЮћЈРѓђ ­ЮћЈРѓЂ n ¤ё} {╬Њ : Ctx n} Рєњ Lang.Hom ­ЮћЈРѓђ ­ЮћЈРѓЂ Рєњ ­ЮћЈРѓђ Рќ╣ ╬Њ Рібрхђ ¤ё Рєњ ­ЮћЈРѓЂ Рќ╣ ╬Њ Рібрхђ ¤ё
Рібрхђ-map Lang.TРЄњT tm = tm
Рібрхђ-map Lang.-РЄњT╬Е (tok x) = tok x
Рібрхђ-map Lang.-РЄњT╬Е ze = ze
Рібрхђ-map Lang.-РЄњT╬Е su = su
Рібрхђ-map Lang.-РЄњT╬Е rec = rec
Рібрхђ-map Lang.-РЄњT╬Е (╬й i) = ╬й i
Рібрхђ-map Lang.-РЄњT╬Е (кЏ e) = кЏ Рібрхђ-map Lang.-РЄњT╬Е e
Рібрхђ-map Lang.-РЄњT╬Е (f ┬и m) = Рібрхђ-map Lang.-РЄњT╬Е f ┬и Рібрхђ-map Lang.-РЄњT╬Е m
Рібрхђ-map Lang.-РЄњT╬Е ╬Е = ╬Е

id : {РёЊ : _} {A : Set РёЊ} Рєњ A Рєњ A
id x = x

­Юњ▒РЪд_РЪД : type Рєњ (Set Рєњ Set) Рєњ Set
­Юњ▒РЪд nat РЪД f = f Nat
­Юњ▒РЪд atom РЪД f = f String
­Юњ▒РЪд ¤Ѓ РЄњ ¤ё РЪД f = ­Юњ▒РЪд ¤Ѓ РЪД f Рєњ ­Юњ▒РЪд ¤ё РЪД f

­ЮњбРЪд_РЪД : {n : Nat} Рєњ Ctx n Рєњ (Set Рєњ Set) Рєњ Set
­ЮњбРЪд ╬Њ РЪД f = (i : Fin _) Рєњ ­Юњ▒РЪд ╬Њ [ i ] РЪД f

РЪдРІёРЪД : Рѕђ {f} Рєњ ­ЮњбРЪд РІё РЪД f
РЪдРІёРЪД ()

_РЪд,РЪД_ : Рѕђ {f n} {╬Њ : Ctx n} {¤Ѓ : type} Рєњ ­ЮњбРЪд ╬Њ РЪД f Рєњ ­Юњ▒РЪд ¤Ѓ РЪД f Рєњ ­ЮњбРЪд ╬Њ , ¤Ѓ РЪД f
(¤Ђ РЪд,РЪД x) ze = x
(¤Ђ РЪд,РЪД x) (su_ i) = ¤Ђ i

Rec : {X : Set} Рєњ (Nat Рєњ X Рєњ X) Рєњ X Рєњ Nat Рєњ X
Rec f x ze = x
Rec f x (su_ n) = f n (Rec f x n)

ext : {X : Set} {¤ё : type} Рєњ (X Рєњ ­Юњ▒РЪд ¤ё РЪД ­ЮћЁ) Рєњ ­ЮћЁ X Рєњ ­Юњ▒РЪд ¤ё РЪД ­ЮћЁ
ext {¤ё = nat} f x = x РЅФ= f
ext {¤ё = atom} f x = x РЅФ= f
ext {¤ё = ¤Ѓ РЄњ ¤ё} g ╬┤ s = ext {¤ё = ¤ё} (╬╗ x Рєњ g x s) ╬┤

_РіЕРЪд_РЪД_ : Рѕђ {­ЮћЈ n ¤ё} {╬Њ : Ctx n} Рєњ Point Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤ё Рєњ ­ЮњбРЪд ╬Њ РЪД id Рєњ ­Юњ▒РЪд ¤ё РЪД id
╬▒ РіЕРЪд tok x РЪД ¤Ђ = x
╬▒ РіЕРЪд ze РЪД ¤Ђ = ze
╬▒ РіЕРЪд su РЪД ¤Ђ = su_
╬▒ РіЕРЪд rec РЪД ¤Ђ = Rec
╬▒ РіЕРЪд ╬й i РЪД ¤Ђ = ¤Ђ i
╬▒ РіЕРЪд кЏ e РЪД ¤Ђ = ╬╗ x Рєњ ╬▒ РіЕРЪд e РЪД (¤Ђ РЪд,РЪД x)
╬▒ РіЕРЪд m ┬и n РЪД ¤Ђ = (╬▒ РіЕРЪд m РЪД ¤Ђ) (╬▒ РіЕРЪд n РЪД ¤Ђ)
╬▒ РіЕРЪд ╬Е РЪД ¤Ђ = ╬▒

­ЮћЁРЪд_РЪД : Рѕђ {n ¤ё} {╬Њ : Ctx n} Рєњ Lang.T╬Е Рќ╣ ╬Њ Рібрхђ ¤ё Рєњ ­ЮњбРЪд ╬Њ РЪД ­ЮћЁ Рєњ ­Юњ▒РЪд ¤ё РЪД ­ЮћЁ
­ЮћЁРЪд tok x РЪД _ = ╬и x
­ЮћЁРЪд ze РЪД _ = ╬и ze
­ЮћЁРЪд su РЪД _ = map su_
­ЮћЁРЪд rec {¤Ѓ = ¤Ѓ} РЪД _ s z = ext {¤ё = ¤Ѓ} (Rec (s Рѕў ╬и) z)
­ЮћЁРЪд ╬й i РЪД ¤Ђ = ¤Ђ i
­ЮћЁРЪд кЏ e РЪД ¤Ђ = ╬╗ x Рєњ ­ЮћЁРЪд e РЪД (¤Ђ РЪд,РЪД x)
­ЮћЁРЪд m ┬и n РЪД ¤Ђ = ­ЮћЁРЪд m РЪД ¤Ђ (­ЮћЁРЪд n РЪД ¤Ђ)
­ЮћЁРЪд ╬Е РЪД _ = ext {¤ё = nat} (¤Ю ╬и)

Рїѕ_РїЅ : {­ЮћЈ : _} Рєњ ­ЮћЈ Рќ╣ РІё Рібрхђ (nat РЄњ nat) РЄњ nat Рєњ ­ЮћЁ Nat
Рїѕ m РїЅ = ­ЮћЁРЪд Рібрхђ-map Lang.-РЄњT╬Е m ┬и ╬Е РЪД РЪдРІёРЪД
