{-# OPTIONS --without-K #-}

module Spread.Core (X : Set) where

open import Basis

module Node where
  data Node : Set where
    [] : Node
    _‚å¢_ : Node ‚Üí X ‚Üí Node

  infixl 5 _‚å¢_

  ‚à£_‚à£ : Node ‚Üí Nat
  ‚à£ [] ‚à£ = 0
  ‚à£ U ‚å¢ x ‚à£ = suc ‚à£ U ‚à£

  module ‚ä¢ where
    _‚ü®‚å¢‚ü©_ : ‚àÄ {U V : Node} {x y} ‚Üí U ‚â° V ‚Üí x ‚â° y ‚Üí U ‚å¢ x ‚â° V ‚å¢ y
    p ‚ü®‚å¢‚ü© q =
     ‚â°.seq
      (‚â°.cong (_‚å¢ _) p)
      (‚â°.cong (_ ‚å¢_) q)

module Point where

  Point : Set
  Point = Nat ‚Üí X

  head : Point ‚Üí X
  head Œ± = Œ± 0

  tail : Point ‚Üí Point
  tail Œ± = Œ± ‚àò suc

  _<‚à∑_ : X ‚Üí Point ‚Üí Point
  (x <‚à∑ Œ±) zero = x
  (x <‚à∑ Œ±) (suc i) = Œ± i

  _‚âà_ : Point ‚Üí Point ‚Üí Set
  Œ± ‚âà Œ≤ = (i : Nat) ‚Üí Œ± i ‚â° Œ≤ i

  open Node hiding (module ‚ä¢)

  _<++_ : Node ‚Üí Point ‚Üí Point
  [] <++ Œ± = Œ±
  (U ‚å¢ x) <++ Œ± = U <++ (x <‚à∑ Œ±)

  infixr 3 _<++_
  infix 2 _[_]
  infix 1 _‚âà_

  _[_]
    : Point
    ‚Üí Nat
    ‚Üí Node
  Œ± [ zero ] = []
  Œ± [ suc n ] = (Œ± [ n ]) ‚å¢ Œ± n

  module ‚ä¢ where
    nth-cong
      : (Œ± Œ≤ : Point) {i j : Nat}
      ‚Üí Œ± ‚âà Œ≤
      ‚Üí i ‚â° j
      ‚Üí Œ± i ‚â° Œ≤ j
    nth-cong Œ± Œ≤ h q =
      ‚â°.seq (‚â°.cong Œ± q) (h _)

    take-cong
      : ‚àÄ {Œ± Œ≤ m n}
      ‚Üí m ‚â° n
      ‚Üí Œ± ‚âà Œ≤
      ‚Üí (Œ± [ m ]) ‚â° (Œ≤ [ n ])
    take-cong {m = zero} p q = ‚â°.cong (_ [_]) p
    take-cong {m = (suc m)} p q =
       (‚â°.seq
        (‚â°.seq
         (‚â°.cong (_ ‚å¢_) (q m))
         (‚â°.cong (_‚å¢ _) (take-cong refl q)))
        (‚â°.cong (_ [_]) p))

    su-+-transpose
      : ‚àÄ m n
      ‚Üí suc (n + m) ‚â° n + suc m
    su-+-transpose zero zero = refl
    su-+-transpose zero (suc n) = ‚â°.cong suc (su-+-transpose zero n)
    su-+-transpose (suc m) zero = refl
    su-+-transpose (suc m) (suc n) = ‚â°.cong suc (su-+-transpose (suc m) n)

    nat-+-zero
      : ‚àÄ n
      ‚Üí n + 0 ‚â° n
    nat-+-zero zero = refl
    nat-+-zero (suc n) = ‚â°.cong suc (nat-+-zero n)

    prepend-len
      : ‚àÄ U n {Œ±}
      ‚Üí (U <++ Œ±) (n + ‚à£ U ‚à£) ‚â° Œ± n
    prepend-len [] n {Œ±} = ‚â°.cong Œ± (nat-+-zero n)
    prepend-len (U ‚å¢ x) n =
      ‚â°.seq
       (nth-cong (U ‚å¢ x <++ _) _
        (Œª _ ‚Üí refl)
        (‚â°.inv (su-+-transpose ‚à£ U ‚à£ n)))
       (prepend-len U (suc n))

    prepend-take-len
      : ‚àÄ U {Œ±}
      ‚Üí ((U <++ Œ±) [ ‚à£ U ‚à£ ]) ‚â° U
    prepend-take-len [] = refl
    prepend-take-len (U ‚å¢ x) =
      prepend-take-len U
        Node.‚ä¢.‚ü®‚å¢‚ü© prepend-len U 0

    cons-head-tail-id
      : ‚àÄ Œ±
      ‚Üí Œ± ‚âà (head Œ± <‚à∑ tail Œ±)
    cons-head-tail-id Œ± zero = refl
    cons-head-tail-id Œ± (suc i) = refl

    prepend-extensional
      : ‚àÄ U Œ± Œ≤
      ‚Üí Œ± ‚âà Œ≤
      ‚Üí U <++ Œ± ‚âà U <++ Œ≤
    prepend-extensional [] Œ± Œ≤ h = h
    prepend-extensional (U ‚å¢ x) Œ± Œ≤ h =
      prepend-extensional U (x <‚à∑ Œ±) (x <‚à∑ Œ≤) Œª
        { zero ‚Üí refl
        ; (suc j) ‚Üí h j
        }

    prepend-snoc-id
      : ‚àÄ U Œ±
      ‚Üí (U <++ Œ±) ‚âà (U ‚å¢ head Œ± <++ tail Œ±)
    prepend-snoc-id U Œ± =
      prepend-extensional U _ _ (cons-head-tail-id Œ±)

module Species where
  open Node

  Species : Set‚ÇÅ
  Species =
    Node
      ‚Üí Set

  monotone
    : Species
    ‚Üí Set
  monotone ùîÑ =
    {U : Node} {x : X}
      ‚Üí ùîÑ U
      ‚Üí ùîÑ (U ‚å¢ x)

  hereditary
    : Species
    ‚Üí Set
  hereditary ùîÑ =
    {U : Node}
      ‚Üí (‚àÄ x ‚Üí ùîÑ (U ‚å¢ x))
      ‚Üí ùîÑ U

  _‚äë_ : Species ‚Üí Species ‚Üí Set
  ùîÑ ‚äë ùîÖ = ‚àÄ x ‚Üí ùîÑ x ‚Üí ùîÖ x

open Point public hiding (module ‚ä¢)
open Node public hiding (module Node; module ‚ä¢)
open Species public
