\begin{code}
open import Basis
\end{code}

%<*spread>
In order to develop intuitionistic analysis, Brouwer introduced a new notion of topological space called a ``spread'', which was based on the idea of taking the basic opens (what we here call prefixes'') of a space as primitive, rather than the points. A spread is a species\footnote{``Species'' is Brouwer's word for what we   now call a ``predicate''.} of these prefixes obeying certain closure conditions, which specifies the basic opens of the space; the points of a spread are then a derived notion. For our purposes, it actually suffices to work relative to the \emph{universal spread}, which is the total species $\top$.

\begin{remark}
  Today, more general notions of spread can be found in both formal topology~\cite{coquand-sambin-smith-valentini:2003} as well as the theory of locales~\cite{maclane-moerdijk:1992}; locales and classical spaces enjoy a duality which is neutralized under the equivalence of the sober spaces and the spatial locales.
\end{remark}

Brouwer thought of these prefixes as finite lists of natural numbers, each of which represented a ``choice''; rather than adopting the natural numbers as the representation of choices, we simply fix a set $X$ which will serve this purpose.\footnote{As a matter of engineering, it is easier to develop a theory if not everything at once is a natural number, even if later on we intend to insantiate it that way.}

\begin{code}
module Spread.Core (X : Set) where

module Prefix where
  data Prefix : Set where
    [] : Prefix
    _‚å¢_ : Prefix ‚Üí X ‚Üí Prefix

  infixl 5 _‚å¢_

  ‚à£_‚à£ : Prefix ‚Üí Nat
  ‚à£ [] ‚à£ = 0
  ‚à£ U ‚å¢ x ‚à£ = suc ‚à£ U ‚à£
\end{code}

\AgdaHide{
\begin{code}

  module ‚ä¢ where
    _‚ü®‚å¢‚ü©_ : ‚àÄ {U V : Prefix} {x y} ‚Üí U ‚â° V ‚Üí x ‚â° y ‚Üí U ‚å¢ x ‚â° V ‚å¢ y
    refl ‚ü®‚å¢‚ü© refl = refl
\end{code}
}

\paragraph{Points (choice sequences)}
Finally the notion of a \emph{point} in the universal spread is defined, together with operations for prepending choices and neighorhoods to it: a point is simply an infinite sequence of choices, what Brouwer himself called a ``choice sequence''.

\begin{code}
module Point where
  Point : Set
  Point = Nat ‚Üí X

  head : Point ‚Üí X
  head Œ± = Œ± 0

  tail : Point ‚Üí Point
  tail Œ± = Œ± ‚àò suc

  _<‚à∑_ : X ‚Üí Point ‚Üí Point
  (x <‚à∑ Œ±) zero = x
  (x <‚à∑ Œ±) (suc i) = Œ± i
\end{code}

The natural notion of equivalence for points is the extensional (pointwise) equivalence.
\begin{code}
  _‚âà_ : Point ‚Üí Point ‚Üí Set
  Œ± ‚âà Œ≤ = ‚àÄ i ‚Üí Œ± i ‚â° Œ≤ i
\end{code}

\AgdaHide{
\begin{code}
  open Prefix hiding (module ‚ä¢)
\end{code}
}

A prefix can be prepended to a point.
\begin{code}
  _<++_ : Prefix ‚Üí Point ‚Üí Point
  [] <++ Œ± = Œ±
  (U ‚å¢ x) <++ Œ± = U <++ (x <‚à∑ Œ±)

  infixr 3 _<++_
  infix 6 _[_]
\end{code}

We provide an operation to take the $n$th approximation of a point $\alpha$:
\begin{code}
  _[_] : Point ‚Üí Nat ‚Üí Prefix
  Œ± [ zero ] = []
  Œ± [ suc n ] = Œ± [ n ] ‚å¢ Œ± n

\end{code}

\AgdaHide{
\begin{code}
  module ‚ä¢ where
    nth-cong
      : (Œ± Œ≤ : Point) {i j : Nat}
      ‚Üí Œ± ‚âà Œ≤
      ‚Üí i ‚â° j
      ‚Üí Œ± i ‚â° Œ≤ j
    nth-cong Œ± Œ≤ h refl =
      h _

    take-cong
      : ‚àÄ {Œ± Œ≤ m n}
      ‚Üí m ‚â° n
      ‚Üí Œ± ‚âà Œ≤
      ‚Üí Œ± [ m ] ‚â° Œ≤ [ n ]
    take-cong {m = zero} {n = .0} refl q = refl
    take-cong {m = (suc m)} {n = .(suc m)} refl q
      rewrite take-cong {m = m} refl q
        | q m
        = refl

    su-+-transpose
      : ‚àÄ m n
      ‚Üí suc (n + m) ‚â° n + suc m
    su-+-transpose zero zero = refl
    su-+-transpose zero (suc n)
      rewrite su-+-transpose zero n
        = refl
    su-+-transpose (suc m) zero = refl
    su-+-transpose (suc m) (suc n)
      rewrite su-+-transpose (suc m) n
        = refl

    nat-+-zero
      : ‚àÄ n
      ‚Üí n + 0 ‚â° n
    nat-+-zero zero = refl
    nat-+-zero (suc n) rewrite nat-+-zero n = refl

    prepend-len
      : ‚àÄ U n {Œ±}
      ‚Üí (U <++ Œ±) (n + ‚à£ U ‚à£) ‚â° Œ± n
    prepend-len [] n rewrite nat-+-zero n = refl
    prepend-len (U ‚å¢ x) n =
      prepend-len U (suc n)
      ‚â°.‚ñ™
        nth-cong
          (U ‚å¢ x <++ _)
          _
          (Œª i ‚Üí refl)
          (su-+-transpose ‚à£ U ‚à£ n ‚â°.‚Åª¬π)


    prepend-take-len
      : ‚àÄ U {Œ±}
      ‚Üí (U <++ Œ±) [ ‚à£ U ‚à£ ] ‚â° U
    prepend-take-len [] = refl
    prepend-take-len (U ‚å¢ x) =
      prepend-take-len U
        Prefix.‚ä¢.‚ü®‚å¢‚ü© prepend-len U 0

    cons-head-tail-id
      : ‚àÄ Œ±
      ‚Üí Œ± ‚âà (head Œ± <‚à∑ tail Œ±)
    cons-head-tail-id Œ± zero = refl
    cons-head-tail-id Œ± (suc i) = refl

    prepend-extensional
      : ‚àÄ U Œ± Œ≤
      ‚Üí Œ± ‚âà Œ≤
      ‚Üí (U <++ Œ±) ‚âà (U <++ Œ≤)
    prepend-extensional [] Œ± Œ≤ h = h
    prepend-extensional (U ‚å¢ x) Œ± Œ≤ h =
      prepend-extensional U (x <‚à∑ Œ±) (x <‚à∑ Œ≤) Œª
        { zero ‚Üí refl
        ; (suc j) ‚Üí h j
        }

    prepend-snoc-id
      : ‚àÄ U Œ±
      ‚Üí (U <++ Œ±) ‚âà (U ‚å¢ head Œ± <++ tail Œ±)
    prepend-snoc-id U Œ± =
      prepend-extensional U _ _ (cons-head-tail-id Œ±)

\end{code}
}

\paragraph{Species of prefixes}
We give a definition of species of prefixes, and what it means for them to be \emph{monotone} and \emph{hereditary}; instead of \emph{hereditary}, we could have called such species \emph{inductive}. Finally, one we give an ordering on species which is just implication of the underline predicates. As a matter of convention, we write species with German letters.

\begin{code}
module Species where
  open Prefix

  Species : Set‚ÇÅ
  Species = Prefix ‚Üí Set

  monotone : Species ‚Üí Set
  monotone ùîÑ = ‚àÄ {U} x ‚Üí ùîÑ U ‚Üí ùîÑ (U ‚å¢ x)

  hereditary : Species ‚Üí Set
  hereditary ùîÑ = ‚àÄ {U} ‚Üí (‚àÄ x ‚Üí ùîÑ (U ‚å¢ x)) ‚Üí ùîÑ U

  _‚äë_ : Species ‚Üí Species ‚Üí Set
  ùîÑ ‚äë ùîÖ = ‚àÄ x ‚Üí ùîÑ x ‚Üí ùîÖ x
\end{code}
%</spread>

\begin{code}
open Point public hiding (module ‚ä¢)
open Prefix public hiding (module Prefix; module ‚ä¢)
open Species public

\end{code}
