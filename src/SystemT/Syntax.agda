module SystemT.Syntax where

open import Prelude.Finite
open import Prelude.Functor
open import Prelude.Monad
open import Prelude.Natural
open import Prelude.Path
open import Prelude.String
open import Prelude.Monoidal hiding (_РЄњ_; _,_)

import SystemT.Context as Ctx
open Ctx hiding (РІё; _,_)

data BaseType : Set where
  nat : BaseType

data Type : Set where
  `_ : BaseType Рєњ Type
  _РЄњ_ : Type Рєњ Type Рєњ Type

infixr 6 _РЄњ_

Ctx : Nat Рєњ Set
Ctx n = Type ^ n

module ­ЮЊЏ where
  data Ob : Set where
    T : Ob
    T╬Е : Ob

  data Hom : Ob Рєњ Ob Рєњ Set where
    TРЄњT : Hom T T
    -РЄњT╬Е : Рѕђ {­ЮћЈ} Рєњ Hom ­ЮћЈ T╬Е

open ­ЮЊЏ using (T; T╬Е; TРЄњT; -РЄњT╬Е)

module _ where
  open Ctx

  data _Рќ╣_Рібрхђ_ {n : Nat} : (­ЮћЈ : ­ЮЊЏ.Ob) (╬Њ : Ctx n) Рєњ Type Рєњ Set where
    zero
      : Рѕђ {­ЮЊЏ} {╬Њ : Ctx n}
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ` nat

    succ
      : Рѕђ {­ЮЊЏ} {╬Њ : Ctx n}
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ` nat
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ` nat

    rec[_]
      : Рѕђ {­ЮЊЏ} {╬Њ : Ctx n} ¤Ѓ
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ , ` nat , ¤Ѓ Рібрхђ ¤Ѓ
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ¤Ѓ
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ` nat
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ¤Ѓ

    ╬й
      : Рѕђ {­ЮЊЏ ¤ё} {╬Њ : Ctx n} i
      Рєњ ¤ё РЅА ╬Њ [ i ]
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ¤ё

    кЏ_
      : Рѕђ {­ЮЊЏ} {╬Њ : Ctx n} {¤Ѓ ¤ё}
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ , ¤Ѓ Рібрхђ ¤ё
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ¤Ѓ РЄњ ¤ё

    _┬и_
      : Рѕђ {­ЮЊЏ} {╬Њ : Ctx n} {¤Ѓ ¤ё}
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ (¤Ѓ РЄњ ¤ё)
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ¤Ѓ
      Рєњ ­ЮЊЏ Рќ╣ ╬Њ Рібрхђ ¤ё

    ╬Е
      : Рѕђ {╬Њ : Ctx n}
      Рєњ T╬Е Рќ╣ ╬Њ Рібрхђ ` nat РЄњ ` nat

  infixl 1 _┬и_
  infixr 3 _Рќ╣_Рібрхђ_

_Рібрхђ_ : {n : Nat} Рєњ Ctx n Рєњ Type Рєњ Set
╬Њ Рібрхђ ¤ё = Рѕђ {­ЮћЈ} Рєњ ­ЮћЈ Рќ╣ ╬Њ Рібрхђ ¤ё

Рібрхђ_ : Type Рєњ Set
Рібрхђ ¤ё = Рѕђ {n} {╬Њ : Ctx n} Рєњ ╬Њ Рібрхђ ¤ё

infixr 3 _Рібрхђ_
infixr 3 Рібрхђ_

Рібрхђ-map : Рѕђ {­ЮЊЏРѓђ ­ЮЊЏРѓЂ n ¤ё} {╬Њ : Ctx n} Рєњ ­ЮЊЏ.Hom ­ЮЊЏРѓђ ­ЮЊЏРѓЂ Рєњ ­ЮЊЏРѓђ Рќ╣ ╬Њ Рібрхђ ¤ё Рєњ ­ЮЊЏРѓЂ Рќ╣ ╬Њ Рібрхђ ¤ё
Рібрхђ-map TРЄњT tm = tm
Рібрхђ-map -РЄњT╬Е zero = zero
Рібрхђ-map -РЄњT╬Е (succ m) = succ (Рібрхђ-map -РЄњT╬Е m)
Рібрхђ-map -РЄњT╬Е (rec[ ¤Ѓ ] s z n) = rec[ ¤Ѓ ] (Рібрхђ-map -РЄњT╬Е s) (Рібрхђ-map -РЄњT╬Е z) (Рібрхђ-map -РЄњT╬Е n)
Рібрхђ-map -РЄњT╬Е (╬й p i) = ╬й p i
Рібрхђ-map -РЄњT╬Е (кЏ e) = кЏ Рібрхђ-map -РЄњT╬Е e
Рібрхђ-map -РЄњT╬Е (f ┬и m) = Рібрхђ-map -РЄњT╬Е f ┬и Рібрхђ-map -РЄњT╬Е m
Рібрхђ-map -РЄњT╬Е ╬Е = ╬Е
